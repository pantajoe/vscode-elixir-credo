{
  "publisher": "pantajoe",
  "name": "vscode-elixir-credo",
  "displayName": "Credo (Elixir Linter)",
  "version": "0.8.3",
  "packageManager": "pnpm@9.1.4",
  "description": "VSC Support for Elixir linter 'Credo'.",
  "author": {
    "name": "pantajoe",
    "url": "https://www.github.com/pantajoe"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pantajoe/vscode-elixir-credo.git"
  },
  "keywords": [
    "elixir",
    "credo",
    "linter"
  ],
  "categories": [
    "Programming Languages",
    "Linters"
  ],
  "main": "./out/main.js",
  "icon": "images/elixir.png",
  "engines": {
    "vscode": "^1.89.0"
  },
  "activationEvents": [
    "onLanguage:elixir"
  ],
  "contributes": {
    "languages": [
      {
        "id": "elixir",
        "extensions": [
          ".ex",
          ".exs"
        ]
      }
    ],
    "configuration": [
      {
        "title": "Credo (Elixir Linter)",
        "properties": {
          "elixir.credo.configurationFile": {
            "title": "Configuration File",
            "markdownDescription": "Configures which configuration file Credo should use. Default is `.credo.exs`. The extension will first look into the project root, then into the `config/` folder",
            "type": "string",
            "default": ".credo.exs",
            "scope": "resource"
          },
          "elixir.credo.credoConfiguration": {
            "title": "Credo Configuration Name",
            "description": "Configures the name of the used configuration (Credo supports having multiple configurations).",
            "type": "string",
            "default": "default",
            "scope": "resource"
          },
          "elixir.credo.executePath": {
            "title": "Execute Path",
            "markdownDescription": "Specifies the execute path where mix can be run from, e.g., `/usr/bin/.asdf/shims`",
            "type": "string",
            "default": ""
          },
          "elixir.credo.strictMode": {
            "title": "Strict Mode",
            "description": "Specifies whether to activate Credo's strict mode",
            "type": "boolean",
            "default": false,
            "scope": "resource"
          },
          "elixir.credo.checksWithTag": {
            "title": "Checks With Tag",
            "markdownDescription": "Only include checks that match the given tag. This setting takes precedence over `#elixir.credo.checksWithoutTag#`.\n\n(see [Credo Docs](https://hexdocs.pm/credo/check_params.html#tags))",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "scope": "resource"
          },
          "elixir.credo.checksWithoutTag": {
            "title": "Checks Without Tag",
            "markdownDescription": "Ignore checks that match the given tag. This setting is overridden by `#elixir.credo.checksWithTag#`.\n\n(see [Credo Docs](https://hexdocs.pm/credo/check_params.html#tags))",
            "type": "array",
            "default": [],
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "scope": "resource"
          },
          "elixir.credo.ignoreWarningMessages": {
            "title": "Ignore Warning Messages",
            "markdownDescription": "Ignore messages like `Found multiple files ...`, `.. file does not exist. Ignoring ...`",
            "type": "boolean",
            "default": false
          },
          "elixir.credo.lintEverything": {
            "title": "Lint Everything",
            "markdownDescription": "Lint every Elixir file, regardless of your `.credo.exs` config",
            "type": "boolean",
            "default": false,
            "scope": "resource"
          },
          "elixir.credo.enableDebug": {
            "title": "Enable Debug Mode",
            "description": "Enable extensive logging to the output channel",
            "type": "boolean",
            "default": false
          },
          "elixir.credo.diffMode.enabled": {
            "title": "Enable Credo Diff Mode",
            "markdownDescription": "Enable Credo's [diff mode](https://hexdocs.pm/credo/diff_command.html) against a [merge base](https://hexdocs.pm/credo/diff_command.html#from-git-merge-base).\n\nYou can specify the merge base in the setting `#elixir.credo.diffMode.mergeBase#`",
            "type": "boolean",
            "default": false,
            "scope": "resource"
          },
          "elixir.credo.diffMode.mergeBase": {
            "title": "Merge Base for Credo Diff Mode",
            "markdownDescription": "Change the [merge base](https://hexdocs.pm/credo/diff_command.html#from-git-merge-base) for Credo's diff mode (e.g., `main`).",
            "type": "string",
            "if": "config.elixir.credo.diffMode.enabled",
            "default": "main",
            "scope": "resource"
          }
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "pnpm run compile",
    "compile": "tsc -p ./",
    "prepare": "husky",
    "lint": "biome check --error-on-warnings .",
    "lint:fix": "biome check --apply --error-on-warnings .",
    "typecheck": "tsc -p ./ --noEmit",
    "watch": "tsc -watch -p ./",
    "pretest": "pnpm run compile && pnpm run lint",
    "test": "node ./out/test/run.js"
  },
  "devDependencies": {
    "@biomejs/biome": "1.7.3",
    "@commitlint/cli": "^19.3.0",
    "@commitlint/config-conventional": "^19.2.2",
    "@total-typescript/shoehorn": "^0.1.2",
    "@types/chai": "^4.3.16",
    "@types/chai-as-promised": "^7.1.8",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.13.0",
    "@types/sinon": "^17.0.3",
    "@types/sinon-chai": "^3.2.12",
    "@types/vscode": "^1.89.0",
    "@vscode/test-electron": "^2.4.0",
    "chai": "<5.0.0",
    "chai-as-promised": "^7.1.2",
    "chai-change": "^2.1.2",
    "glob": "^10.4.1",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.5",
    "mocha": "^10.4.0",
    "sinon": "^18.0.0",
    "sinon-chai": "^3.7.0",
    "typescript": "^5.4.5"
  },
  "lint-staged": {
    "*": [
      "biome check --apply --no-errors-on-unmatched --files-ignore-unknown=true"
    ]
  }
}